{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8187351,"sourceType":"datasetVersion","datasetId":4848107}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport datetime as dt\nimport plotly.graph_objects as go\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, RobustScaler, OrdinalEncoder\nfrom sklearn.metrics import r2_score","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df= pd.read_csv('/kaggle/input/laptop-price-dataset/laptop_data.csv')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head(5)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.drop(columns={'Unnamed: 0'}, inplace = True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head(2)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Some of the column types need to be changed: Inches , Cpu , Ram , Memory ,and Weight","metadata":{}},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe(include='O')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isna().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Checking null values\ndf[df.isnull().any(axis=1)]\n\n## As they are 30 rows , I will drop all these rows\ndf.dropna(inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Check for duplicates\ndf.duplicated().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Dropping duplicates\ndf.drop_duplicates(inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.nunique().sort_values(ascending=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cats = df.select_dtypes(include='O').columns\nfor i in cats:\n    if df[i].nunique() <= 199:\n        print('Value Counts in ',i)\n        print(df[i].value_counts())\n        print('-----------------------------------------')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Inferences:**\nScreen Resolution ,Gpu , Cpu ,and Memory need Feature Engineering some features has values\n\nPrices will be converted to Dollars\n\nRam and weight : units will be removed & will be converted to numerical values","metadata":{}},{"cell_type":"code","source":"## Replacing all ? with Nan\ndf.replace('?',np.nan,inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Data Cleanning & Preprocessing**","metadata":{}},{"cell_type":"markdown","source":"Ram , Inches ,and weights variables needs data cleaning","metadata":{}},{"cell_type":"code","source":"## Removing Characters of Ram , Inches\ndf['Ram'] = df['Ram'].str.replace('GB', '')\ndf['Weight'] = df['Weight'].str.replace('kg', '')\n\n## Changing their values to numerical values\ndf['Ram']=pd.to_numeric(df['Ram'], errors='coerce')\ndf['Weight']=pd.to_numeric(df['Weight'],errors='coerce')\ndf['Inches']= pd.to_numeric(df['Inches'],errors='coerce')\n\n## Rename Columns\ndf.rename(columns={'Ram':'RamGB','Weight' :'WeightKG'}, inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isna().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Price To dollars\n1 Indian Rupee equals 0.012 United States Dollar","metadata":{}},{"cell_type":"code","source":"## Changing Price to dollars\ndf['Price'] = df['Price'] * 0.012","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**CPU**","metadata":{}},{"cell_type":"code","source":"df['Cpu'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Extracting GHz from Cpu \ndf['GHz'] = df['Cpu'].str.extract(r'(\\d+(?:\\.\\d+)?GHz)') \ndf['GHz'] = df['GHz'].str.replace(r'GHz','',regex=True)\n\n## Converting GHz column to numeric\ndf['GHz'] = pd.to_numeric(df['GHz'],errors='coerce')\n\n## Removing GHz from original Cpu\ndf['Cpu'] = df['Cpu'].str.replace(r'(\\d+(?:\\.\\d+)?GHz)','',regex=True) ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.Cpu.value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Cpu Brand\ndf['CpuBrand']= df['Cpu'].str.extract(r'^(\\w+)')\ndf['CpuBrand'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[df['CpuBrand']=='Intel']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Cpu Version\ndf['CpuVersion'] = df['Cpu'].str.replace(r'^(\\w+)','',regex=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Drop Old Cpu Column\ndf.drop(columns={'Cpu'},inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Memory**","metadata":{}},{"cell_type":"code","source":"df.Memory.value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"There are Different types : SSD , Hybrid , FlashStorage ,and HDD\n\nSome laptops have Extra memories","metadata":{}},{"cell_type":"code","source":"## Remove GB & TB from Numbers\ndf['Memory'] = df['Memory'].str.replace(r'GB|\\.0', '' ,regex=True)\ndf['Memory'] = df['Memory'].str.replace(r'TB','000',regex=True)\n\ndf['Memory'].unique()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Main & Extra Memory column creation\ndf['MainMemory']= df['Memory'].str.replace(r' ','').str.split('+', n = 1, expand = True)[0]\ndf['SecondMemory']=df['Memory'].str.replace(r' ','').str.split('+', n = 1, expand = True)[1]\nprint('MainMemory Values: ',df['MainMemory'].unique())\nprint('SecondMemory Values: ',df['SecondMemory'].unique())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Main & Extra Memories type\ndf['MainMemoryType'] = df['MainMemory'].str.extract(r'(\\D+)')\ndf['SecondMemoryType'] = df['SecondMemory'].str.extract(r'(\\D+)')\n\n## Removing Type from Memory Columns\ndf['MainMemory'] = df['MainMemory'].str.extract(r'(\\d+)',)\ndf['SecondMemory'] = df['SecondMemory'].str.extract(r'(\\d+)',)\n\n## Changing Memory to Numerical \ndf['MainMemory'] = pd.to_numeric(df['MainMemory'],errors='coerce')\ndf['SecondMemory']= pd.to_numeric(df['SecondMemory'],errors= 'coerce')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Drop the original Memory Column\ndf.drop(columns={'Memory'},inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isna().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['SecondMemory'].replace(np.nan,0,inplace=True)\ndf['MainMemory'].replace(np.nan,0,inplace=True)\ndf['SecondMemoryType'].replace(np.nan,'None',inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isna().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Screen Resolutions**","metadata":{}},{"cell_type":"code","source":"df['ScreenResolution'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The screen resolution column consists of : Panel Type , Touchscreen , Quality ,and Resolution\n\nThe Quality & Resolution are the same , so we will only keep one of them","metadata":{}},{"cell_type":"code","source":"## TouchScreen Column\ndf['TouchScreen'] =df[\"ScreenResolution\"].str.contains(\"TouchScreen\", na=False, case=False)\nprint(df.TouchScreen.value_counts())\n\n## Change it into 1 and 0\ndf['TouchScreen'] = df['TouchScreen'].astype(int)\nprint(df.TouchScreen.value_counts())","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Create a column for resolution**","metadata":{}},{"cell_type":"code","source":"## Extract resolution using Regular Experision\ndf['Resolution'] = df['ScreenResolution'].str.extract(r'(\\d+x\\d+)')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Create a column for PanelType**","metadata":{}},{"cell_type":"code","source":"## Removing all Features from cell , leaving only Panel Type\ndf['PanelType'] = df['ScreenResolution'].replace(r'(Full HD|Quad HD|Quad HD|\\+|/|4K Ultra HD|Touchscreen|(\\d+x\\d+))','',regex=True)\ndf['PanelType'].unique()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Combining all Values of IPS Panal\ndf['PanelType'] = df['PanelType'].replace(r' ','',regex=True)\ndf['PanelType'].unique()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## replace '' , with Nan\ndf['PanelType'] = df['PanelType'].replace(r'^\\s*$', 'Without', regex=True)\ndf.PanelType.value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.drop(columns={'ScreenResolution'},inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Checking Nan Values\ndf.isna().sum()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['MainMemory'] = pd.to_numeric(df['MainMemory'],errors='coerce')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**GPU**","metadata":{}},{"cell_type":"code","source":"df['Gpu'].value_counts()\ndf['Gpu'].unique()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Spliting variables into GPU brand & Version**","metadata":{}},{"cell_type":"code","source":"## Cpu Brand\n\ndf['GpuBrand'] = df['Gpu'].str.extract(r'^(\\w+)')\nprint('Brand',df['GpuBrand'].value_counts())\n\n## GPU versions\ndf['GpuVersion'] = df['Gpu'].str.replace(r'^(\\w+)','',regex=True)\n\n## Drop Old column\ndf.drop(columns={'Gpu'},inplace=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[df['GpuBrand']=='ARM']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"I have dropped the Samsung Row as it will have no effect on data","metadata":{}},{"cell_type":"code","source":"df=df[df['GpuBrand']!='ARM']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['MainMemory'] = pd.to_numeric(df['MainMemory'],errors='coerce')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **EDA(Exploratory Data Analysis)**","metadata":{}},{"cell_type":"code","source":"df.head(1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig= px.bar( df , x=df['Company'].value_counts().index ,\n           y= df['Company'].value_counts().values)\nfig.update_xaxes(title='Brand')\nfig.update_yaxes(title='Number of Sales')\nfig.update_traces(marker_color='lightgreen')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Graph represents most frequant type of laptops","metadata":{}},{"cell_type":"code","source":"fig= px.bar( df , x=df['TypeName'].value_counts().index ,\n           y= df['TypeName'].value_counts().values)\nfig.update_xaxes(title='Type')\nfig.update_yaxes(title='Number of Sales')\nfig.update_traces(marker_color='lightpink')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Graph represents most frequant type of CPU & GPU","metadata":{}},{"cell_type":"code","source":"fig= px.bar( df , x=df['CpuVersion'].value_counts().nlargest(13).index ,\n           y= df['CpuVersion'].value_counts().nlargest(13).values)\nfig.update_xaxes(title='Type')\nfig.update_yaxes(title='Number of Sales')\nfig.update_traces(marker_color='lightblue')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig= px.bar( df , x=df['GpuVersion'].value_counts().nlargest(13).index ,\n           y= df['GpuVersion'].value_counts().nlargest(13).values)\nfig.update_xaxes(title='Type')\nfig.update_yaxes(title='Number of Sales')\nfig.update_traces(marker_color='lightblue')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Graph represents laptop screen sizes","metadata":{}},{"cell_type":"code","source":"px.histogram(data_frame=df,\n             x='Inches')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"px.box(data_frame=df,\n             x='Price')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Boxplot for Main Memory Storage ","metadata":{}},{"cell_type":"code","source":"px.pie(data_frame = df,\n        names= df['MainMemoryType'].value_counts().sort_index().index,\n        values= df['MainMemoryType'].value_counts().sort_index().values,\n        title = 'Main Laptop Memory Type ',\n        hole = 0.5)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig= px.bar( df , x=df['SecondMemoryType'].value_counts().index ,\n           y= df['SecondMemoryType'].value_counts().values)\nfig.update_xaxes(title='Space')\nfig.update_yaxes(title='Number of Sales')\nfig.update_traces(marker_color='lightsalmon')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Graph for laptops with touch screens","metadata":{}},{"cell_type":"code","source":"## Creating a data frame with value counts of TouchScreens Laptops\ncount_T = df['TouchScreen'].value_counts()\n\n\n## Creating Variables to be used in pie chart graph \nlabels = [ 'No TouchScreen','TouchScreen']\nvalues = count_T.values\n\n\n## Pie chart \nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.3)])\nfig.update_layout(title='Touch Screen Or Not')\nfig.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Bi & Multi Variate analysis**","metadata":{}},{"cell_type":"code","source":"df.head(1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Creating a data frame by grouping\ndf1=df.groupby(['Company'])['TypeName'].value_counts().to_frame().sort_values(by='count',ascending=False)\ndf1=df1.reset_index()\ndf1\n\n## Creating a bar chart to Vis\n\nfig= px.bar( df1 , x=df1['TypeName'] ,\n           y= df1['count']\n        , color='Company'\n        , barmode = 'group')\nfig.update_xaxes(title='Type ')\nfig.update_yaxes(title='Total Sales')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Average Price Of each company(Total sales vs Type)","metadata":{}},{"cell_type":"code","source":"## Create a data frame with average price of each laptop\ndf1= df.groupby('Company')['Price'].mean().reset_index().nlargest(10,'Price')\n\n## Create a bar chart with to Visu\n\npx.bar(df1 ,\n       x=df1['Company'] , \n       y='Price',\n       title='Brands with their avg Price')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Bar graph for average price of each type","metadata":{}},{"cell_type":"code","source":"## Create a data frame with average price of each laptop\ndf1= df.groupby('TypeName')['Price'].mean().reset_index().nlargest(10,'Price')\n\n## Create a bar chart with to Visu\n\npx.bar(df1 ,\n       x=df1['TypeName'] , \n       y='Price',\n       title='Type with their avg Price')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Relationship between Price and RAM","metadata":{}},{"cell_type":"code","source":"## Creating a bar chart graph \nfig= px.scatter( df, x=df['RamGB'],\n           y= df['Price'] ,trendline=\"ols\" )\nfig.update_xaxes(title='RAM')\nfig.update_yaxes(title='Average Price')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Creating a bar chart graph \nfig= px.scatter( df, x=df['GHz'],\n           y= df['Price'] ,trendline=\"ols\" )\nfig.update_xaxes(title='GHz')\nfig.update_yaxes(title='Average Price')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Scatter plot for CPU effect on price","metadata":{}},{"cell_type":"code","source":"px.box(data_frame=df,\n             y='Price',\n             color='CpuBrand')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Boxplot for the correlation ","metadata":{}},{"cell_type":"code","source":"## Correlation map\ndf.corr(numeric_only=True).T","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Correlation data frame with price\ndf3 = df.corr(numeric_only=True)['Price'].sort_values(ascending=False).reset_index()\ndf3","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"## Correlation Between Each feature\npx.imshow(df.corr(numeric_only=True),text_auto=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Map for interpreting Quantiles and deteting outliers","metadata":{}},{"cell_type":"code","source":"df.quantile(numeric_only=True,q=[0.05,0.1,0.4,0.5,0.7, 0.8, 0.9, 0.95, 0.99, 0.995,1]).T","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Handling Outliers","metadata":{}},{"cell_type":"code","source":"## visualizing  Outliers\nnumout = ['Price','Inches','RamGB','WeightKG','GHz']\nplt.figure(figsize = (25 , 7))\nfor i , col in enumerate(numout,1):\n    plt.subplot(3,5,i)\n    sns.boxplot(data = df, x= col)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = df[(df['Price']<3000)]\ndf = df[ (df['Inches']<30) ]\ndf = df[(df['WeightKG'] <10)]\ndf = df[(df['RamGB']<40)]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.quantile(numeric_only=True,q=[0.05,0.1,0.4,0.5,0.7, 0.8, 0.9, 0.95, 0.99, 0.995,1]).T","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.histplot(df['Price'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.histplot(np.log(df['Price']))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.to_csv('laptop-clean.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **Machine Learning Model**","metadata":{}},{"cell_type":"markdown","source":"**Data Splitting**","metadata":{}},{"cell_type":"code","source":"## Filling Nan\ndf.fillna('None',inplace=True)\ndf.to_csv('laptop-clean.csv',index=False)\n# importing Libraries\nfrom sklearn.model_selection import train_test_split\n\n# Data Splitting into features and target\nX = df.drop('Price', axis=1)\ny = np.log(df['Price'])\n\n\n# Splitting into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=X[['CpuBrand','TouchScreen']])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X.describe(include='O')","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:12:54.615096Z","iopub.execute_input":"2024-04-21T19:12:54.615441Z","iopub.status.idle":"2024-04-21T19:12:54.645968Z","shell.execute_reply.started":"2024-04-21T19:12:54.615404Z","shell.execute_reply":"2024-04-21T19:12:54.644769Z"},"trusted":true},"execution_count":93,"outputs":[{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"       Company  TypeName       OpSys CpuBrand       CpuVersion MainMemoryType  \\\ncount     1269      1269        1269     1269             1269           1269   \nunique      19         6           9        2               91              4   \ntop       Dell  Notebook  Windows 10    Intel   Core i5 7200U             SSD   \nfreq       291       705        1043     1209              193            833   \n\n       SecondMemoryType Resolution PanelType GpuBrand        GpuVersion  \ncount              1269       1269      1269     1269              1269  \nunique                4         15         3        3               108  \ntop                None  1920x1080   Without    Intel   HD Graphics 620  \nfreq               1061        832       915      703               279  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Company</th>\n      <th>TypeName</th>\n      <th>OpSys</th>\n      <th>CpuBrand</th>\n      <th>CpuVersion</th>\n      <th>MainMemoryType</th>\n      <th>SecondMemoryType</th>\n      <th>Resolution</th>\n      <th>PanelType</th>\n      <th>GpuBrand</th>\n      <th>GpuVersion</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1269</td>\n      <td>1269</td>\n      <td>1269</td>\n      <td>1269</td>\n      <td>1269</td>\n      <td>1269</td>\n      <td>1269</td>\n      <td>1269</td>\n      <td>1269</td>\n      <td>1269</td>\n      <td>1269</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>19</td>\n      <td>6</td>\n      <td>9</td>\n      <td>2</td>\n      <td>91</td>\n      <td>4</td>\n      <td>4</td>\n      <td>15</td>\n      <td>3</td>\n      <td>3</td>\n      <td>108</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>Dell</td>\n      <td>Notebook</td>\n      <td>Windows 10</td>\n      <td>Intel</td>\n      <td>Core i5 7200U</td>\n      <td>SSD</td>\n      <td>None</td>\n      <td>1920x1080</td>\n      <td>Without</td>\n      <td>Intel</td>\n      <td>HD Graphics 620</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>291</td>\n      <td>705</td>\n      <td>1043</td>\n      <td>1209</td>\n      <td>193</td>\n      <td>833</td>\n      <td>1061</td>\n      <td>832</td>\n      <td>915</td>\n      <td>703</td>\n      <td>279</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# **Data Pre-Processing**","metadata":{}},{"cell_type":"markdown","source":"Handling Nans","metadata":{}},{"cell_type":"code","source":"df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:13:27.683649Z","iopub.execute_input":"2024-04-21T19:13:27.683974Z","iopub.status.idle":"2024-04-21T19:13:27.692834Z","shell.execute_reply.started":"2024-04-21T19:13:27.683952Z","shell.execute_reply":"2024-04-21T19:13:27.691936Z"},"trusted":true},"execution_count":94,"outputs":[{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"Company             0\nTypeName            0\nInches              0\nRamGB               0\nOpSys               0\nWeightKG            0\nPrice               0\nGHz                 0\nCpuBrand            0\nCpuVersion          0\nMainMemory          0\nSecondMemory        0\nMainMemoryType      0\nSecondMemoryType    0\nTouchScreen         0\nResolution          0\nPanelType           0\nGpuBrand            0\nGpuVersion          0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df['PanelType'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:13:36.775374Z","iopub.execute_input":"2024-04-21T19:13:36.775730Z","iopub.status.idle":"2024-04-21T19:13:36.783416Z","shell.execute_reply.started":"2024-04-21T19:13:36.775708Z","shell.execute_reply":"2024-04-21T19:13:36.782313Z"},"trusted":true},"execution_count":95,"outputs":[{"execution_count":95,"output_type":"execute_result","data":{"text/plain":"PanelType\nWithout                  915\nIPSPanel                 337\nIPSPanelRetinaDisplay     17\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"Handling Nans As Nan Values here in Panel type means they do not have IPS panel type ,so we will fill it with None as String Value","metadata":{}},{"cell_type":"code","source":"X.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:14:03.542498Z","iopub.execute_input":"2024-04-21T19:14:03.543480Z","iopub.status.idle":"2024-04-21T19:14:03.552087Z","shell.execute_reply.started":"2024-04-21T19:14:03.543409Z","shell.execute_reply":"2024-04-21T19:14:03.551081Z"},"trusted":true},"execution_count":96,"outputs":[{"execution_count":96,"output_type":"execute_result","data":{"text/plain":"Company             0\nTypeName            0\nInches              0\nRamGB               0\nOpSys               0\nWeightKG            0\nGHz                 0\nCpuBrand            0\nCpuVersion          0\nMainMemory          0\nSecondMemory        0\nMainMemoryType      0\nSecondMemoryType    0\nTouchScreen         0\nResolution          0\nPanelType           0\nGpuBrand            0\nGpuVersion          0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"cat_cols = X.select_dtypes(include = 'O').columns.tolist()\nprint('Categorical Columns :', cat_cols)\nnum_cols = X.select_dtypes(exclude='O').columns.tolist()\nprint('Numerical Columns :', num_cols)","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:14:18.566399Z","iopub.execute_input":"2024-04-21T19:14:18.566731Z","iopub.status.idle":"2024-04-21T19:14:18.574369Z","shell.execute_reply.started":"2024-04-21T19:14:18.566708Z","shell.execute_reply":"2024-04-21T19:14:18.572781Z"},"trusted":true},"execution_count":97,"outputs":[{"name":"stdout","text":"Categorical Columns : ['Company', 'TypeName', 'OpSys', 'CpuBrand', 'CpuVersion', 'MainMemoryType', 'SecondMemoryType', 'Resolution', 'PanelType', 'GpuBrand', 'GpuVersion']\nNumerical Columns : ['Inches', 'RamGB', 'WeightKG', 'GHz', 'MainMemory', 'SecondMemory', 'TouchScreen']\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **Category Encoding**\n\nFrom category_encoders import BinaryEncoder enc = BinaryEncoder(cols=cat_cols) X_train = enc.fit_transform(X_train) X_test = enc.transform(X_test)","metadata":{}},{"cell_type":"markdown","source":"**Scaling**\n\nFrom sklearn.preprocessing import StandardScaler scaler = StandardScaler()\n\nX_train[num_cols] = scaler.fit_transform(X_train[num_cols]) X_test[num_cols] = scaler.transform(X_test[num_cols])","metadata":{}},{"cell_type":"code","source":"print(num_cols)\nprint(cat_cols)","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:52:09.479602Z","iopub.execute_input":"2024-04-21T19:52:09.479964Z","iopub.status.idle":"2024-04-21T19:52:09.485293Z","shell.execute_reply.started":"2024-04-21T19:52:09.479940Z","shell.execute_reply":"2024-04-21T19:52:09.484136Z"},"trusted":true},"execution_count":98,"outputs":[{"name":"stdout","text":"['Inches', 'RamGB', 'WeightKG', 'GHz', 'MainMemory', 'SecondMemory', 'TouchScreen']\n['Company', 'TypeName', 'OpSys', 'CpuBrand', 'CpuVersion', 'MainMemoryType', 'SecondMemoryType', 'Resolution', 'PanelType', 'GpuBrand', 'GpuVersion']\n","output_type":"stream"}]},{"cell_type":"code","source":"## Pre-Processing \n# Data Preprocessing\nfrom category_encoders import BinaryEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\n# Preprocessing for numerical data\nnumerical_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler())])\n\n# Preprocessing for categorical data\ncategorical_transformer = Pipeline(steps=[('binary', BinaryEncoder())])\n\n# Bundle preprocessing for numerical and categorical data\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, ['Inches', 'RamGB', 'WeightKG', 'GHz', \n                                        'MainMemory', 'SecondMemory', 'TouchScreen']),\n        ('cat', categorical_transformer, ['Company', 'TypeName', 'OpSys', 'CpuBrand', 'CpuVersion'\n                                          ,'MainMemoryType', 'SecondMemoryType', \n                                          'Resolution', 'PanelType', 'GpuBrand', 'GpuVersion'])])\nX_train = preprocessor.fit_transform(X_train)\nX_test  = preprocessor.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:52:36.011451Z","iopub.execute_input":"2024-04-21T19:52:36.011801Z","iopub.status.idle":"2024-04-21T19:52:36.322584Z","shell.execute_reply.started":"2024-04-21T19:52:36.011778Z","shell.execute_reply":"2024-04-21T19:52:36.321458Z"},"trusted":true},"execution_count":99,"outputs":[]},{"cell_type":"markdown","source":"# **Model Training**","metadata":{}},{"cell_type":"markdown","source":" **Linear Regression**","metadata":{}},{"cell_type":"code","source":"\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nlr = LinearRegression()\nlr.fit(X_train, y_train)\ny_pred = lr.predict(X_test)\n\nprint('Training Score: ', lr.score(X_train, y_train))\nprint('Testing Score: ', lr.score(X_test, y_test))\nprint('RMSE: ', np.sqrt(mean_squared_error(y_test, lr.predict(X_test))))","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:53:01.971002Z","iopub.execute_input":"2024-04-21T19:53:01.971303Z","iopub.status.idle":"2024-04-21T19:53:02.014209Z","shell.execute_reply.started":"2024-04-21T19:53:01.971283Z","shell.execute_reply":"2024-04-21T19:53:02.013286Z"},"trusted":true},"execution_count":100,"outputs":[{"name":"stdout","text":"Training Score:  0.8061136363536878\nTesting Score:  0.7527534915672908\nRMSE:  0.29188768627791023\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**SVR**","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVR\n\nsvr = SVR()\n\nsvr.fit(X_train, y_train)\n\nprint('Training Score: ', svr.score(X_train, y_train))\n\nprint('Testing Score: ', svr.score(X_test, y_test))","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:54:09.789189Z","iopub.execute_input":"2024-04-21T19:54:09.789540Z","iopub.status.idle":"2024-04-21T19:54:09.877746Z","shell.execute_reply.started":"2024-04-21T19:54:09.789518Z","shell.execute_reply":"2024-04-21T19:54:09.876496Z"},"trusted":true},"execution_count":101,"outputs":[{"name":"stdout","text":"Training Score:  0.9518619150196732\nTesting Score:  0.8785412980030768\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**KNN**","metadata":{}},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsRegressor\n\ntrain_acc, test_acc = [], []\nfor i in range(1,40,2):\n    knn_model = KNeighborsRegressor(n_neighbors = i).fit(X_train,y_train)\n    train_acc.append(knn_model.score(X_train, y_train))\n    test_acc.append(knn_model.score(X_test, y_test))\n    \nfig = px.line(x= range(1,40,2),y=[train_acc, test_acc], title = 'Train vs. Valid ACC')\nfig.update_layout(xaxis_title=\"Value of K\",yaxis_title=\"Accuracy\",legend_title=\"Train vs Valid\")\nfig.data[0].name = \"Train Acc\"\nfig.data[1].name = \"Valid Acc\"\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:54:49.328124Z","iopub.execute_input":"2024-04-21T19:54:49.328491Z","iopub.status.idle":"2024-04-21T19:54:49.697263Z","shell.execute_reply.started":"2024-04-21T19:54:49.328469Z","shell.execute_reply":"2024-04-21T19:54:49.696463Z"},"trusted":true},"execution_count":102,"outputs":[{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"9ba1b76f-54d9-4b18-b53f-aa9c570930e9\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"9ba1b76f-54d9-4b18-b53f-aa9c570930e9\")) {                    Plotly.newPlot(                        \"9ba1b76f-54d9-4b18-b53f-aa9c570930e9\",                        [{\"hovertemplate\":\"variable=wide_variable_0\\u003cbr\\u003ex=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"wide_variable_0\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Train Acc\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39],\"xaxis\":\"x\",\"y\":[0.9986295442891733,0.9196054320514879,0.8932045089721636,0.8769585772378761,0.8647171646036379,0.8557074004664875,0.8459168884073481,0.8370021407928157,0.8292642516175507,0.8194737859340572,0.8100913874492177,0.8020008737603652,0.7946069531391784,0.7880474876062881,0.7828635299691363,0.7762325939967556,0.7687468633743376,0.7613234049144276,0.7567909153138462,0.7523030205735806],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"variable=wide_variable_1\\u003cbr\\u003ex=%{x}\\u003cbr\\u003evalue=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"wide_variable_1\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines\",\"name\":\"Valid Acc\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39],\"xaxis\":\"x\",\"y\":[0.7744969594901033,0.7953609027501921,0.7844606340871381,0.7881750745869999,0.7856515582393487,0.7819419307243924,0.7826171375743126,0.774452309084378,0.7659324123963043,0.7529607742463861,0.7429880791897228,0.7358010276939784,0.7240996290285573,0.7167758593455346,0.7025158778803796,0.6941229755191576,0.6846858494048343,0.6792297678103358,0.675315868614919,0.6728475791834505],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Value of K\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Accuracy\"}},\"legend\":{\"title\":{\"text\":\"Train vs Valid\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Train vs. Valid ACC\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('9ba1b76f-54d9-4b18-b53f-aa9c570930e9');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"markdown","source":"KNN best n is 9","metadata":{}},{"cell_type":"code","source":"knn = KNeighborsRegressor(n_neighbors=9)\nknn.fit(X_train, y_train)\nprint('TrainingScore: ',knn.score(X_train,y_train))\nprint('Test Score: ',knn.score(X_test, y_test))","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:55:38.883141Z","iopub.execute_input":"2024-04-21T19:55:38.883495Z","iopub.status.idle":"2024-04-21T19:55:38.901608Z","shell.execute_reply.started":"2024-04-21T19:55:38.883472Z","shell.execute_reply":"2024-04-21T19:55:38.900927Z"},"trusted":true},"execution_count":103,"outputs":[{"name":"stdout","text":"TrainingScore:  0.8647171646036379\nTest Score:  0.7856515582393487\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Random Forest Regressor**","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(n_estimators=200, random_state=42, max_depth=100)\n\nrf.fit(X_train, y_train)\n\nprint('Training Score: ', rf.score(X_train, y_train))\nprint('Testing Score: ', rf.score(X_test, y_test))","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:56:04.822496Z","iopub.execute_input":"2024-04-21T19:56:04.822826Z","iopub.status.idle":"2024-04-21T19:56:05.973727Z","shell.execute_reply.started":"2024-04-21T19:56:04.822804Z","shell.execute_reply":"2024-04-21T19:56:05.972555Z"},"trusted":true},"execution_count":104,"outputs":[{"name":"stdout","text":"Training Score:  0.9827177557207971\nTesting Score:  0.8666063796731267\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Comparison of the model for the best model**","metadata":{}},{"cell_type":"code","source":"models = [lr, rf, svr , knn]\ndic = {}\nfor model in models:\n    model.fit(X_train, y_train)\n    dic[model] =  model.score(X_test, y_test)\n\npd.DataFrame(dic, index=['Score'])","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:56:46.480370Z","iopub.execute_input":"2024-04-21T19:56:46.480759Z","iopub.status.idle":"2024-04-21T19:56:47.693247Z","shell.execute_reply.started":"2024-04-21T19:56:46.480735Z","shell.execute_reply":"2024-04-21T19:56:47.692259Z"},"trusted":true},"execution_count":105,"outputs":[{"execution_count":105,"output_type":"execute_result","data":{"text/plain":"       LinearRegression()  \\\nScore            0.752753   \n\n       (DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1608637542), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1273642419), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1935803228), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=787846414), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=996406378), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1201263687), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=423734972), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=415968276), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=670094950), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1914837113), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=669991378), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=429389014), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=249467210), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1972458954), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1572714583), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1433267572), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=434285667), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=613608295), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=893664919), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=648061058), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=88409749), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=242285876), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2018247425), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=953477463), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1427830251), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1883569565), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=911989541), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=3344769), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=780932287), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2114032571), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=787716372), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=504579232), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1306710475), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=479546681), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=106328085), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=30349564), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1855189739), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=99052376), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1250819632), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=106406362), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=480404538), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1717389822), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=599121577), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=200427519), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1254751707), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2034764475), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1573512143), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=999745294), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1958805693), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=389151677), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1224821422), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=508464061), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=857592370), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1642661739), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=61136438), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2075460851), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=396917567), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2004731384), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=199502978), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1545932260), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=461901618), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=774414982), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=732395540), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1934879560), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=279394470), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=56972561), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1927948675), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1899242072), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1999874363), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=271820813), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1324556529), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1655351289), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1308306184), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=68574553), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=419498548), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=991681409), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=791274835), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1035196507), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1890440558), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=787110843), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=524150214), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=472432043), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2126768636), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1431061255), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=147697582), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=744595490), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1758017741), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1679592528), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1111451555), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=782698033), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=698027879), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1096768899), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1338788865), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1826030589), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=86191493), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=893102645), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=200619113), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=290770691), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=793943861), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=134489564), ...)  \\\nScoren\n          SVR()  KNeighborsRegressor(n_neighbors=9)  \nScore  0.878541                            0.785652  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LinearRegression()</th>\n      <th>(DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1608637542), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1273642419), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1935803228), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=787846414), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=996406378), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1201263687), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=423734972), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=415968276), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=670094950), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1914837113), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=669991378), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=429389014), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=249467210), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1972458954), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1572714583), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1433267572), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=434285667), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=613608295), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=893664919), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=648061058), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=88409749), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=242285876), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2018247425), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=953477463), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1427830251), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1883569565), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=911989541), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=3344769), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=780932287), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2114032571), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=787716372), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=504579232), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1306710475), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=479546681), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=106328085), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=30349564), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1855189739), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=99052376), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1250819632), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=106406362), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=480404538), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1717389822), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=599121577), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=200427519), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1254751707), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2034764475), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1573512143), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=999745294), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1958805693), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=389151677), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1224821422), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=508464061), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=857592370), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1642661739), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=61136438), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2075460851), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=396917567), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2004731384), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=199502978), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1545932260), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=461901618), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=774414982), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=732395540), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1934879560), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=279394470), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=56972561), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1927948675), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1899242072), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1999874363), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=271820813), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1324556529), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1655351289), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1308306184), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=68574553), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=419498548), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=991681409), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=791274835), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1035196507), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1890440558), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=787110843), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=524150214), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=472432043), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=2126768636), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1431061255), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=147697582), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=744595490), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1758017741), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1679592528), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1111451555), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=782698033), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=698027879), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1096768899), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1338788865), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=1826030589), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=86191493), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=893102645), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=200619113), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=290770691), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=793943861), DecisionTreeRegressor(max_depth=100, max_features=1.0, random_state=134489564), ...)</th>\n      <th>SVR()</th>\n      <th>KNeighborsRegressor(n_neighbors=9)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Score</th>\n      <td>0.752753</td>\n      <td>0.866606</td>\n      <td>0.878541</td>\n      <td>0.785652</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"As we can see the best model is Random Forest with 90.5% accuracy","metadata":{}},{"cell_type":"markdown","source":"# Voting Regressor","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import  VotingRegressor\n\n# Voting Regressor\nvoting_reg = VotingRegressor(estimators=[('lr', lr), ('rf', rf), ('svr', svr)])\n\n# Fitting the data\nvoting_reg.fit(X_train, y_train)\n\n# Checking the score\nprint('Training Score: ', voting_reg.score(X_train, y_train))\nprint('Testing Score: ', voting_reg.score(X_test, y_test))","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:59:02.835582Z","iopub.execute_input":"2024-04-21T19:59:02.835914Z","iopub.status.idle":"2024-04-21T19:59:04.035123Z","shell.execute_reply.started":"2024-04-21T19:59:02.835892Z","shell.execute_reply":"2024-04-21T19:59:04.034201Z"},"trusted":true},"execution_count":106,"outputs":[{"name":"stdout","text":"Training Score:  0.9436233603139401\nTesting Score:  0.8638342485944555\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Bagging Regressor","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import BaggingRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\n## Decision Tree\ndt_reg = DecisionTreeRegressor(max_depth=10)\n\nbag_reg = BaggingRegressor(dt_reg, n_estimators=200, bootstrap=True, random_state=42,\n                           max_features=0.8)\n                           \n\n# Fitting the data\nbag_reg.fit(X_train, y_train)\n\n# Checking the score\nprint('Training Score: ', bag_reg.score(X_train, y_train))\nprint('Testing Score: ', bag_reg.score(X_test, y_test))","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:59:26.113360Z","iopub.execute_input":"2024-04-21T19:59:26.113705Z","iopub.status.idle":"2024-04-21T19:59:26.983221Z","shell.execute_reply.started":"2024-04-21T19:59:26.113683Z","shell.execute_reply":"2024-04-21T19:59:26.982160Z"},"trusted":true},"execution_count":107,"outputs":[{"name":"stdout","text":"Training Score:  0.9640439943497572\nTesting Score:  0.8680517467076018\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# XGBoost","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor(n_estimators=300, max_depth=3, random_state=42)\n\n# Fitting the data\nxgb.fit(X_train, y_train)\n\n# Checking the score\nprint('Training Score: ', xgb.score(X_train, y_train))\nprint('Testing Score: ', xgb.score(X_test, y_test))","metadata":{"execution":{"iopub.status.busy":"2024-04-21T19:59:48.139005Z","iopub.execute_input":"2024-04-21T19:59:48.139297Z","iopub.status.idle":"2024-04-21T19:59:48.505733Z","shell.execute_reply.started":"2024-04-21T19:59:48.139276Z","shell.execute_reply":"2024-04-21T19:59:48.504961Z"},"trusted":true},"execution_count":108,"outputs":[{"name":"stdout","text":"Training Score:  0.9792948091441445\nTesting Score:  0.8879602140780701\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Cross Validation","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\n\n# Models\nfor i in range (2,6):\n    lin_reg_scores = cross_val_score(LinearRegression(), X_train, y_train, cv=i)\n    rf_reg_scores = cross_val_score(RandomForestRegressor(), X_train, y_train, cv=i)\n    svr_reg_score = cross_val_score(SVR(), X_train, y_train, cv=i)\n\n    # Models scores\n    print('CV = ',i)\n    print('Linear Regression Mean Score: ', lin_reg_scores.mean().round(3))\n    print('Random Forest Mean Score: ', rf_reg_scores.mean().round(3))\n    print('SVR: ', svr_reg_score.mean().round(3))\n    print('----------------------------')","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:00:28.340853Z","iopub.execute_input":"2024-04-21T20:00:28.341186Z","iopub.status.idle":"2024-04-21T20:00:34.683604Z","shell.execute_reply.started":"2024-04-21T20:00:28.341161Z","shell.execute_reply":"2024-04-21T20:00:34.682809Z"},"trusted":true},"execution_count":109,"outputs":[{"name":"stdout","text":"CV =  2\nLinear Regression Mean Score:  0.757\nRandom Forest Mean Score:  0.831\nSVR:  0.84\n----------------------------\nCV =  3\nLinear Regression Mean Score:  0.755\nRandom Forest Mean Score:  0.85\nSVR:  0.856\n----------------------------\nCV =  4\nLinear Regression Mean Score:  0.769\nRandom Forest Mean Score:  0.859\nSVR:  0.865\n----------------------------\nCV =  5\nLinear Regression Mean Score:  0.78\nRandom Forest Mean Score:  0.86\nSVR:  0.866\n----------------------------\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Hyperparameter Tuning","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:01:04.890274Z","iopub.execute_input":"2024-04-21T20:01:04.891007Z","iopub.status.idle":"2024-04-21T20:01:04.895481Z","shell.execute_reply.started":"2024-04-21T20:01:04.890984Z","shell.execute_reply":"2024-04-21T20:01:04.894245Z"},"trusted":true},"execution_count":110,"outputs":[]},{"cell_type":"code","source":"# Random Forest Regressor\nparam_grid = {\n    'n_estimators': [100, 200, ],\n    'max_features': [0.2, 0.4, 0.6]\n}\n\ndt_grid = GridSearchCV(RandomForestRegressor(), param_grid, cv=3)\n\n# Fitting the data\ndt_grid.fit(X_train, y_train)\n\n# Best Parameters\nprint('Best Parameters: ', dt_grid.best_params_)\nprint('Best Score: ', dt_grid.best_score_)\n\n# Checking the score\nprint('Training Score: ', dt_grid.score(X_train, y_train))\nprint('Testing Score: ', dt_grid.score(X_test, y_test))\n              ","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:01:27.694821Z","iopub.execute_input":"2024-04-21T20:01:27.695160Z","iopub.status.idle":"2024-04-21T20:01:34.172318Z","shell.execute_reply.started":"2024-04-21T20:01:27.695136Z","shell.execute_reply":"2024-04-21T20:01:34.171219Z"},"trusted":true},"execution_count":111,"outputs":[{"name":"stdout","text":"Best Parameters:  {'max_features': 0.2, 'n_estimators': 100}\nBest Score:  0.8660750759459144\nTraining Score:  0.9829361718350608\nTesting Score:  0.8689727510352798\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred = rf.predict(X_test)\ny_pred_xgb = xgb.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:05:26.315966Z","iopub.execute_input":"2024-04-21T20:05:26.316312Z","iopub.status.idle":"2024-04-21T20:05:26.339849Z","shell.execute_reply.started":"2024-04-21T20:05:26.316289Z","shell.execute_reply":"2024-04-21T20:05:26.339042Z"},"trusted":true},"execution_count":113,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (5,5))\nplt.scatter(np.exp(y_test), np.exp(y_pred), alpha=0.5, color='red',label='RF, R2 {:.2f} %'.format(r2_score(y_test, y_pred)*100))\nplt.scatter(np.exp(y_test), np.exp(y_pred_xgb), alpha=0.5, color='blue',label='XGBoost, R2 {:.2f} %'.format(r2_score(y_test, y_pred_xgb)*100))\nplt.plot([0, 7000], [0, 7000], linestyle='--')\nplt.axis([0, 7000, 0, 7000])\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.title('RF vs XGBoost price regression ($)')\nplt.legend(loc='upper left', ncol=1, fontsize=13, fancybox=True, shadow=True, frameon=True)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:05:39.155938Z","iopub.execute_input":"2024-04-21T20:05:39.156256Z","iopub.status.idle":"2024-04-21T20:05:39.426683Z","shell.execute_reply.started":"2024-04-21T20:05:39.156233Z","shell.execute_reply":"2024-04-21T20:05:39.425849Z"},"trusted":true},"execution_count":114,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 500x500 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Preprocessor Saving\nimport pickle\npickle.dump(preprocessor, open('preprocessor.pkl', 'wb'))\n\n# Model Saving\npickle.dump(xgb, open('model.pkl', 'wb'))","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:06:03.695209Z","iopub.execute_input":"2024-04-21T20:06:03.696023Z","iopub.status.idle":"2024-04-21T20:06:03.706339Z","shell.execute_reply.started":"2024-04-21T20:06:03.695997Z","shell.execute_reply":"2024-04-21T20:06:03.705579Z"},"trusted":true},"execution_count":115,"outputs":[]},{"cell_type":"markdown","source":"Saving the preprocessed model","metadata":{}},{"cell_type":"code","source":"import os\nprint(os.path.dirname(os.path.abspath('preprocessor.pkl')))","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:09:43.040108Z","iopub.execute_input":"2024-04-21T20:09:43.040564Z","iopub.status.idle":"2024-04-21T20:09:43.045482Z","shell.execute_reply.started":"2024-04-21T20:09:43.040537Z","shell.execute_reply":"2024-04-21T20:09:43.044743Z"},"trusted":true},"execution_count":117,"outputs":[{"name":"stdout","text":"/kaggle/working\n","output_type":"stream"}]},{"cell_type":"code","source":"import pickle\n\n# Assuming 'preprocessor.pkl' is in the current working directory.\nwith open('preprocessor.pkl', 'rb') as file:\n    preprocessor = pickle.load(file)\nprint(preprocessor)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:16:37.173953Z","iopub.execute_input":"2024-04-21T20:16:37.174618Z","iopub.status.idle":"2024-04-21T20:16:37.195129Z","shell.execute_reply.started":"2024-04-21T20:16:37.174579Z","shell.execute_reply":"2024-04-21T20:16:37.193969Z"},"trusted":true},"execution_count":118,"outputs":[{"name":"stdout","text":"ColumnTransformer(transformers=[('num',\n                                 Pipeline(steps=[('scaler', StandardScaler())]),\n                                 ['Inches', 'RamGB', 'WeightKG', 'GHz',\n                                  'MainMemory', 'SecondMemory',\n                                  'TouchScreen']),\n                                ('cat',\n                                 Pipeline(steps=[('binary', BinaryEncoder())]),\n                                 ['Company', 'TypeName', 'OpSys', 'CpuBrand',\n                                  'CpuVersion', 'MainMemoryType',\n                                  'SecondMemoryType', 'Resolution', 'PanelType',\n                                  'GpuBrand', 'GpuVersion'])])\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Streamlit Model","metadata":{}},{"cell_type":"code","source":"!pip install pyngrok","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:20:35.170474Z","iopub.execute_input":"2024-04-21T20:20:35.170819Z","iopub.status.idle":"2024-04-21T20:20:47.052414Z","shell.execute_reply.started":"2024-04-21T20:20:35.170795Z","shell.execute_reply":"2024-04-21T20:20:47.051485Z"},"trusted":true},"execution_count":119,"outputs":[{"name":"stdout","text":"Collecting pyngrok\n  Downloading pyngrok-7.1.6-py3-none-any.whl.metadata (7.4 kB)\nRequirement already satisfied: PyYAML>=5.1 in /opt/conda/lib/python3.10/site-packages (from pyngrok) (6.0.1)\nDownloading pyngrok-7.1.6-py3-none-any.whl (22 kB)\nInstalling collected packages: pyngrok\nSuccessfully installed pyngrok-7.1.6\n","output_type":"stream"}]},{"cell_type":"code","source":"from pyngrok import ngrok\n\n# Set your ngrok token\n!ngrok authtoken your_ngrok_auth_token_here","metadata":{"execution":{"iopub.status.busy":"2024-04-21T20:20:54.347952Z","iopub.execute_input":"2024-04-21T20:20:54.348263Z","iopub.status.idle":"2024-04-21T20:20:59.877798Z","shell.execute_reply.started":"2024-04-21T20:20:54.348240Z","shell.execute_reply":"2024-04-21T20:20:59.876453Z"},"trusted":true},"execution_count":120,"outputs":[{"name":"stdout","text":"Authtoken saved to configuration file: /root/.config/ngrok/ngrok.yml                                \n","output_type":"stream"}]},{"cell_type":"code","source":"%%writefile app.py\nimport streamlit as st\n\nst.title('My Streamlit App')","metadata":{"execution":{"iopub.status.busy":"2024-04-21T21:00:01.930724Z","iopub.execute_input":"2024-04-21T21:00:01.931084Z","iopub.status.idle":"2024-04-21T21:00:01.937290Z","shell.execute_reply.started":"2024-04-21T21:00:01.931060Z","shell.execute_reply":"2024-04-21T21:00:01.935959Z"},"trusted":true},"execution_count":125,"outputs":[{"name":"stdout","text":"Overwriting app.py\n","output_type":"stream"}]},{"cell_type":"code","source":"import os\nst.write(\"Current directory:\", os.getcwd())\nst.write(\"Absolute path to preprocessor.pkl:\", os.path.abspath('preprocessor.pkl'))","metadata":{"execution":{"iopub.status.busy":"2024-04-22T01:14:50.046323Z","iopub.status.idle":"2024-04-22T01:14:50.047503Z","shell.execute_reply.started":"2024-04-22T01:14:50.047189Z","shell.execute_reply":"2024-04-22T01:14:50.047218Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import xgboost\nprint(xgboost.__version__)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-22T01:39:31.018133Z","iopub.execute_input":"2024-04-22T01:39:31.018632Z","iopub.status.idle":"2024-04-22T01:39:34.376554Z","shell.execute_reply.started":"2024-04-22T01:39:31.018596Z","shell.execute_reply":"2024-04-22T01:39:34.375336Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"2.0.3\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip show category_encoders","metadata":{"execution":{"iopub.status.busy":"2024-04-22T02:06:11.954358Z","iopub.execute_input":"2024-04-22T02:06:11.956735Z","iopub.status.idle":"2024-04-22T02:06:28.430177Z","shell.execute_reply.started":"2024-04-22T02:06:11.956681Z","shell.execute_reply":"2024-04-22T02:06:28.428760Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Name: category-encoders\nVersion: 2.6.3\nSummary: A collection of sklearn transformers to encode categorical variables as numeric\nHome-page: https://github.com/scikit-learn-contrib/category_encoders\nAuthor: Will McGinnis\nAuthor-email: will@pedalwrencher.com\nLicense: BSD\nLocation: /opt/conda/lib/python3.10/site-packages\nRequires: numpy, pandas, patsy, scikit-learn, scipy, statsmodels\nRequired-by: \n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install category_encoders==<version_number>","metadata":{"execution":{"iopub.status.busy":"2024-04-22T02:06:32.213463Z","iopub.execute_input":"2024-04-22T02:06:32.213969Z","iopub.status.idle":"2024-04-22T02:06:33.318741Z","shell.execute_reply.started":"2024-04-22T02:06:32.213928Z","shell.execute_reply":"2024-04-22T02:06:33.317175Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"/bin/bash: -c: line 0: syntax error near unexpected token `newline'\n/bin/bash: -c: line 0: `pip install category_encoders==<version_number>'\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nimport joblib\n\n# Example: Define and create the 'preprocessor' variable\npreprocessor = StandardScaler()\n# ... (other code to fit the preprocessor on data, if necessary)\n\n# Now you can save it because 'preprocessor' is defined\njoblib.dump(preprocessor, 'preprocessor.joblib')\n","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:50:31.329463Z","iopub.execute_input":"2024-04-22T03:50:31.329851Z","iopub.status.idle":"2024-04-22T03:50:32.686665Z","shell.execute_reply.started":"2024-04-22T03:50:31.329820Z","shell.execute_reply":"2024-04-22T03:50:32.685522Z"},"trusted":true},"execution_count":1,"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"['preprocessor.joblib']"},"metadata":{}}]},{"cell_type":"code","source":"print(preprocessor)\n","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:58:27.033011Z","iopub.execute_input":"2024-04-22T03:58:27.034118Z","iopub.status.idle":"2024-04-22T03:58:27.041988Z","shell.execute_reply.started":"2024-04-22T03:58:27.034083Z","shell.execute_reply":"2024-04-22T03:58:27.040846Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"StandardScaler()\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install --upgrade category_encoders","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:58:42.293155Z","iopub.execute_input":"2024-04-22T03:58:42.293579Z","iopub.status.idle":"2024-04-22T03:58:58.537689Z","shell.execute_reply.started":"2024-04-22T03:58:42.293544Z","shell.execute_reply":"2024-04-22T03:58:58.536487Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Requirement already satisfied: category_encoders in /opt/conda/lib/python3.10/site-packages (2.6.3)\nRequirement already satisfied: numpy>=1.14.0 in /opt/conda/lib/python3.10/site-packages (from category_encoders) (1.26.4)\nRequirement already satisfied: scikit-learn>=0.20.0 in /opt/conda/lib/python3.10/site-packages (from category_encoders) (1.2.2)\nRequirement already satisfied: scipy>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from category_encoders) (1.11.4)\nRequirement already satisfied: statsmodels>=0.9.0 in /opt/conda/lib/python3.10/site-packages (from category_encoders) (0.14.1)\nRequirement already satisfied: pandas>=1.0.5 in /opt/conda/lib/python3.10/site-packages (from category_encoders) (2.2.2)\nRequirement already satisfied: patsy>=0.5.1 in /opt/conda/lib/python3.10/site-packages (from category_encoders) (0.5.6)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.0.5->category_encoders) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.0.5->category_encoders) (2023.3.post1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas>=1.0.5->category_encoders) (2023.4)\nRequirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from patsy>=0.5.1->category_encoders) (1.16.0)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.20.0->category_encoders) (1.4.0)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=0.20.0->category_encoders) (3.2.0)\nRequirement already satisfied: packaging>=21.3 in /opt/conda/lib/python3.10/site-packages (from statsmodels>=0.9.0->category_encoders) (21.3)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=21.3->statsmodels>=0.9.0->category_encoders) (3.1.1)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"import joblib\n\n# To save\njoblib.dump(preprocessor, 'preprocessor.joblib')\n\n# To load\npreprocessor = joblib.load('preprocessor.joblib')","metadata":{"execution":{"iopub.status.busy":"2024-04-22T03:59:07.789569Z","iopub.execute_input":"2024-04-22T03:59:07.790018Z","iopub.status.idle":"2024-04-22T03:59:07.797334Z","shell.execute_reply.started":"2024-04-22T03:59:07.789977Z","shell.execute_reply":"2024-04-22T03:59:07.796325Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}